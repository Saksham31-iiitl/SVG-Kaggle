{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# # # model.py\n\n# # from utils.prompt_parser import preprocess_prompt, extract_features\n\n# # class Model:\n# #     def __init__(self):\n# #         # Initialize components if needed (e.g., load models, templates, etc.)\n# #         pass\n\n# #     def predict(self, prompt: str) -> str:\n# #         \"\"\"\n# #         Main function to generate SVG code from a text prompt.\n        \n# #         Args:\n# #             prompt (str): The input text prompt.\n            \n# #         Returns:\n# #             str: SVG code as a string.\n# #         \"\"\"\n# #         tokens = preprocess_prompt(prompt)\n# #         features = extract_features(tokens)\n        \n# #         # For demonstration, we build a simple SVG based on the extracted features.\n# #         svg_code = self.generate_svg(features)\n# #         return svg_code\n\n# #     def generate_svg(self, features: dict) -> str:\n# #         \"\"\"\n# #         Generates a basic SVG based on extracted features.\n        \n# #         Args:\n# #             features (dict): Dictionary containing visual features.\n            \n# #         Returns:\n# #             str: A string of SVG code.\n# #         \"\"\"\n# #         # For now, create a simple SVG that lists detected shapes and colors.\n# #         shapes = ', '.join(features.get('shapes', [])) or \"none\"\n# #         colors = ', '.join(features.get('colors', [])) or \"none\"\n        \n# #         # This is a basic template and can be extended for real SVG generation.\n# #         svg_template = f'''\n# #         <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"200\">\n# #             <text x=\"10\" y=\"20\" font-size=\"16\" fill=\"black\">\n# #                 Shapes: {shapes}\n# #             </text>\n# #             <text x=\"10\" y=\"50\" font-size=\"16\" fill=\"black\">\n# #                 Colors: {colors}\n# #             </text>\n# #         </svg>\n# #         '''\n# #         return svg_template.strip()\n\n# # # For local testing:\n# # if __name__ == '__main__':\n# #     model = Model()\n# #     sample_prompt = \"A large blue circle and a small red square\"\n# #     svg_output = model.predict(sample_prompt)\n# #     print(\"Generated SVG Code:\")\n# #     print(svg_output)\n\n\n# # model.py\n\n# from utils.prompt_parser import preprocess_prompt, extract_features\n# from utils.svg_renderer import generate_svg_from_features\n\n# class Model:\n#     def __init__(self):\n#         # Initialize any components or models here if needed.\n#         pass\n\n#     def predict(self, prompt: str) -> str:\n#         \"\"\"\n#         Main function to generate SVG code from a text prompt.\n        \n#         Args:\n#             prompt (str): The input text prompt.\n            \n#         Returns:\n#             str: SVG code as a string.\n#         \"\"\"\n#         # Preprocess the prompt and extract visual features.\n#         tokens = preprocess_prompt(prompt)\n#         features = extract_features(tokens)\n        \n#         # Generate the SVG based on these features.\n#         svg_code = self.generate_svg(features)\n#         return svg_code\n\n#     def generate_svg(self, features: dict) -> str:\n#         \"\"\"\n#         Generates an SVG image based on the features extracted from the prompt.\n        \n#         Args:\n#             features (dict): Dictionary containing visual features.\n            \n#         Returns:\n#             str: A string of SVG code.\n#         \"\"\"\n#         svg_code = generate_svg_from_features(features)\n#         return svg_code\n\n# # For local testing:\n# if __name__ == '__main__':\n#     model = Model()\n#     sample_prompt = \"A large blue circle, a small red square, and a green triangle\"\n#     svg_output = model.predict(sample_prompt)\n#     print(\"Generated SVG Code:\")\n#     print(svg_output)\n\n\n\n# model.py\n\nfrom utils.prompt_parser import preprocess_prompt, extract_features\nfrom utils.svg_renderer import generate_svg_from_features\nfrom utils.llm_svg_generator import LLMSVGGenerator\n\nclass Model:\n    def __init__(self, use_llm: bool = False):\n        \"\"\"\n        Initialize the model.\n        \n        Args:\n            use_llm (bool): If True, the model uses the LLM-based generator.\n                            Otherwise, it uses the rule-based approach.\n        \"\"\"\n        self.use_llm = use_llm\n        if self.use_llm:\n            self.llm_generator = LLMSVGGenerator()\n\n    def predict(self, prompt: str) -> str:\n        \"\"\"\n        Generates SVG code from a given text prompt.\n        \n        Args:\n            prompt (str): The input text prompt.\n            \n        Returns:\n            str: Generated SVG code.\n        \"\"\"\n        if self.use_llm:\n            # Use the LLM-based approach.\n            svg_code = self.llm_generator.generate_svg(prompt)\n        else:\n            # Use the rule-based pipeline.\n            tokens = preprocess_prompt(prompt)\n            features = extract_features(tokens)\n            svg_code = generate_svg_from_features(features)\n        return svg_code\n\n# For local testing:\nif __name__ == '__main__':\n    # Set use_llm=True to try the LLM-based generator.\n    model = Model(use_llm=False)  # Change to True to use the LLM approach\n    sample_prompt = \"A large blue circle, a small red square, and a green triangle\"\n    svg_output = model.predict(sample_prompt)\n    print(\"Generated SVG Code:\")\n    print(svg_output)","metadata":{"_uuid":"107317b4-c761-4f47-97c8-ba93e83bb8d9","_cell_guid":"19944715-5205-4997-8c2c-8fc128f5d475","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}